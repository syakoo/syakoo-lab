---
/**
 * Writing 詳細ページ
 *   - /writings/[writingId]
 */
import type { WritingContent } from "@/contents/writings/types";
import { HeaderFooterTemplate } from "@/features/common/components/HeaderFooterTemplate";
import { Meta } from "@/features/common/components/Meta";
import "@/features/common/logics/globalSettings";
import { formatPageTitle } from "@/features/common/logics/pageTitle";
import { serializeMDX } from "@/features/mdx/serializeMDX";
import { WritingViewer } from "@/features/writings/WritingViewer";
import type { Writing } from "@/features/writings/types";
import { readWritingContents } from "@/contents/writings/reader";
import { resolveWritingMeta } from "@/features/writings/writingContentResolver";

interface Props {
  writingContent: WritingContent;
}

export async function getStaticPaths() {
  const writingContents = await readWritingContents();

  return writingContents.map((writingContent) => ({
    params: {
      id: writingContent.frontMatter.id,
    },
    props: {
      writingContent: writingContent,
    },
  }));
}

const { writingContent } = Astro.props;

const writing: Writing = {
  meta: resolveWritingMeta({ frontMatter: writingContent.frontMatter }),
  serializedBody: await serializeMDX(writingContent.body),
};
---

<html lang="ja">
  <head>
    <Meta
      title={formatPageTitle(writing.meta.title)}
      url={Astro.url.pathname}
    />
    <meta content={Astro.generator} name="generator" />
    <link
      crossorigin="anonymous"
      href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"
      integrity="sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"
      rel="stylesheet"
    />
  </head>
  <body>
    <HeaderFooterTemplate>
      <main>
        <WritingViewer client:load writing={writing} />
      </main>
    </HeaderFooterTemplate>
  </body>
</html>
